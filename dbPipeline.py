#!/usr/bin/env python

import sys
import os
from os import listdir
import tarfile

## usage: python dbPipeline.py THYM

try:
	downloadedFile = sys.argv[1]
	cancerType = sys.argv[2]


	neo4jshell = "/root/neo4j-enterprise-2.2.1/bin/neo4j-shell "

	## Extract raw data from TCGA tar file 
	print ("Extracting raw files now...")
	tarFile = tarfile.open(downloadedFile, 'r:tar')

	tarFile.extractall("/DBdata/"+cancerType)

	## Process Clinical Data
	print ("Processing Clinical data now...")
	os.chdir("/DBdata/"+cancerType)
	os.system("cp /DBdata/"+cancerType+"/Clinical/Biotab/nationwidechildrens.org_clinical_patient_"+cancerType.lower()+".txt ./")
	os.system("python /root/CSI-DB/DataProcessing/Clinical/parseClinicalField.py "+cancerType.upper())
	os.system("sh /root/CSI-DB/DataProcessing/Clinical/processClinicalData.sh nationwidechildrens.org_clinical_patient_"+cancerType.lower()+".txt")
	print ("Importing Clinical data to database...")
	os.system(neo4jshell+"-file tcgaClinical-"+cancerType.upper()+".cql")

	## Process miRNA Data
	print ("Processing miRNA data now...")
	os.chdir("/DBdata/"+cancerType+"/miRNASeq/")

	os.system("perl /root/CSI-DB/DataProcessing/MiRNA/executeFiles.pl "+cancerType.upper())

	dirs = listdir("/DBdata/"+ cancerType.upper() +"/miRNASeq/")
	for dir in dirs:
        	print dir
        	if "IlluminaHiSeq" in dir:
			print ("Parsing and processing miRNA files which generated by Illumina HiSeq...")
			os.system("perl /root/CSI-DB/DataProcessing/MiRNA/parseFolderFiles_miRNAHiSeq.pl "+cancerType.upper())
			print ("Importing miRNA data...")
                	os.system(neo4jshell+"-file "+cancerType.upper()+".Hi.mirna.cql")
			os.system("perl /root/CSI-DB/DataProcessing/MiRNA/miRNATypeWriter.pl "+cancerType.upper())

                        print ("Creating relationship cql file for miRNA data (Hi)...")
                        os.system("perl /root/CSI-DB/DataProcessing/MiRNA/parseFolderFiles_Rel_miRNAHiSeq.pl "+cancerType.upper())
                        print ("Finish relationship cql file for miRNA data (Hi)...")

		elif "IlluminaGA" in dir:
			print ("Parsing and processing miRNA files which generated by Illumina GA...")
                        os.system("perl /root/CSI-DB/DataProcessing/MiRNA/parseFolderFiles_miRNAGA.pl "+cancerType.upper())
                        print ("Importing miRNA data...")
                        os.system(neo4jshell+"-file "+cancerType.upper()+".GA.mirna.cql")
                        os.system("perl /root/CSI-DB/DataProcessing/MiRNA/miRNATypeWriter.pl "+cancerType.upper())

                        print ("Creating relationship cql file for miRNA data (GA)...")
                        os.system("perl /root/CSI-DB/DataProcessing/MiRNA/parseFolderFiles_Rel_miRNAGASeq.pl "+cancerType.upper())

	
        os.chdir("/DBdata/"+cancerType+"/miRNASeq/")
        os.system("perl /root/CSI-DB/DataProcessing/MiRNA/miRNATypeWriter.pl "+cancerType.upper())
        print ("Writing more details for miRNA data...")
        os.system(neo4jshell+"-file "+cancerType.upper()+".SetSampleType.cql")


	## Process Mutation Data

        print ("Processing mutation data now...")
        mutDirs = listdir("/DBdata/"+ cancerType.upper() + "/Somatic_Mutations/")
        dirofmut = "/DBdata/"+ cancerType.upper() + "/Somatic_Mutations/"
        larFileName = ""
        larFileSize = 0
        curated = "No"

        curatedFile = ""
        beExecFile = ""


        ## Detect curated data exist or not
        for mutDir in mutDirs:
                if "curated" in mutDir:
                        curated = "Yes"
                        curatedFile = mutDir
                        for dirpath, dirnames, filenames in os.walk(dirofmut+mutDir):
                                for f in filenames:
                                        fp = os.path.join(dirpath, f)
                                        curatedFile =  dirpath + "/" + str(f)



        if (curated == "No"):
                for dirpath, dirnames, filenames in os.walk(dirofmut):
                        for f in filenames:
                                fp = os.path.join(dirpath, f)
                                if os.path.getsize(fp) > larFileSize:
                                        larFileName = str(dirpath)+"/"+str(f)
                                        larFileSize = os.path.getsize(fp)
                                        print str(f)
                                        print os.path.getsize(fp)

                print "Largest mutation file: " + larFileName


        print "Curated File Exist : " + curated


        if (curated == "Yes"):
                beExecFile = curatedFile
        else:
                beExecFile = larFileName

        print "File will be processing: " + beExecFile


        os.chdir("/DBdata/"+cancerType+"/Somatic_Mutations")
        os.system("/root/CSI-DB/DataProcessing/Mutation/processMutation.sh "+ beExecFile + " "+cancerType.upper()+".csv")
        os.system("python /root/CSI-DB/DataProcessing/Mutation/createNewMutFile.py "+cancerType.upper()+".csv "+cancerType.upper())
	os.system("/root/CSI-DB/DataProcessing/Mutation/importMutation.sh mut" +cancerType.upper()+".csv "+cancerType.upper()+" &" )


        print ("Create relationship cql file for mutation")
        os.system("python /root/CSI-DB/DataProcessing/Mutation/genRelCliMut.py " +cancerType.upper())


	## Process Expression Data

        print ("Processing expression data now...")
        os.chdir("/DBdata/"+cancerType+"/RNASeqV2/")
        os.system("perl /root/CSI-DB/DataProcessing/Expression/executeFiles_Expression.pl " + cancerType.upper())
        os.system("/root/CSI-DB/DataProcessing/Expression/generateCQL.sh " + cancerType.upper())
        os.system("cp /DBdata/"+cancerType.upper()+"/Clinical/Biotab/nationwidechildrens.org_biospecimen_aliquot_"+cancerType.lower()+".txt .")
        os.system("/root/CSI-DB/DataProcessing/Expression/barcodeExpression.sh " + "nationwidechildrens.org_biospecimen_aliquot_"+cancerType.lower()+".txt")
        print ("Generating barcode cql...")
        os.system("perl /root/CSI-DB/DataProcessing/Expression/fetchCSVColumn2.pl /DBdata/"+ cancerType.upper() + "/RNASeqV2/nationwidechildrens.org_biospecimen_aliquot_" +cancerType.lower()+".txt "+cancerType.upper())
        print ("Start to import expression data...")
        os.system("perl /root/CSI-DB/DataProcessing/Expression/executeImport_Expression.pl " + cancerType.upper())
        os.system(neo4jshell+"-file "+cancerType.upper()+".ExpTypeBarcode.cql")
        print ("Finish RNASeqV2 data import!!")

        print ("Create relationship cql file for RNASeqV2 expression")
        os.system("python /root/CSI-DB/DataProcessing/Expression/genRelCliExp.py " +cancerType.upper())


        ## Connect the relationship
        print ("Connect clinical and miRNA data nodes...")
        os.chdir("/DBdata/"+cancerType+"/miRNASeq")
        if os.path.isfile("/DBdata/"+cancerType.upper()+"/miRNASeq/"+cancerType.upper()+".Hi.miRNARel.cql"):
                os.system(neo4jshell+"-file "+"/DBdata/"+cancerType.upper()+"/miRNASeq/"+cancerType.upper()+".Hi.miRNARel.cql &")
        else:
                os.system(neo4jshell+"-file "+"/DBdata/"+cancerType.upper()+"/miRNASeq/"+cancerType.upper()+".GA.miRNARel.cql &")

        print ("Connect clinical and mutation nodes...")
        os.chdir("/DBdata/"+cancerType+"/Somatic_Mutations")
        os.system(neo4jshell+"-file "+"/DBdata/"+cancerType.upper()+"/Somatic_Mutations/relCliMut-"+cancerType.upper()+".cql &")

        print ("Connect clinical and RNASeqV2 data nodes...")
        os.chdir("/DBdata/"+cancerType+"/RNASeqV2")
        os.system(neo4jshell+"-file "+"/DBdata/"+cancerType.upper()+"/RNASeqV2/relCliExp-"+cancerType.upper()+".cql &")




except:
	print "You miss some arguments."
	print "python dbPipeline.py [downloadedFile] [cancerType]"
